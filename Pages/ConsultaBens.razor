@page "/consulta-bens"
@using LearningBlazor.Models;
@using LearningBlazor.Services;
@inject PessoaService pessoaService;
@inject PropriedadeService propriedadeService;
@inject NavigationManager navegacao;

<h3>Consulta de Bens</h3>

<div class="container" style="display: flex; flex-direction: column; gap: 16px; padding: 0 50px 100px 50px">
    <nav class="navbar navbar-light" style="background-color: darkgreen"></nav>
    <div class="form-group">
        <label for="input-datalist">Buscar</label>

        <input type="text" value="@cpfPesquisa" class="form-control" placeholder="Buscar" list="lista-pessoas"
            @onchange="SelecionarPessoas">

        <datalist id="lista-pessoas">
            @foreach (var item in listPessoas)
            {
                <option value="@item.Cpf">@item.Nome</option>
            }

        </datalist>
    </div>

    <div>
        <div class="form-check">
            <InputCheckbox id="idPropertyName" class="form-check-input" @bind-Value="@ExibirFiltroValor"
                @onclick="LimpaCampoCheckbox" />
            <label class="form-check-label" for="idPropertyName">Exibir filtro de Valores</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="idPropertyName" class="form-check-input" @bind-Value="@ExibirFiltroDescricao"
                @onclick="LimpaCampoCheckbox" />
            <label class="form-check-label" for="idPropertyName">Exibir filtro de Descrição</label>
        </div>
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Filtrar bens acima do valor informado:</label>
        <input @bind="filtroValor" type="number" class="form-control" disabled="@(!ExibirFiltroValor)" />
    </div>

    <div class=" mb-3">
        <label for="exampleFormControlInput1" class="form-label">Filtrar bens pela descrição:</label>
        <input @bind="filtroDescricao" type="text" class="form-control" disabled="@(!ExibirFiltroDescricao)">
    </div>

    <div style="width: 100%; display: flex; flex-direction: row; gap: 16px;">
        <button type="button" class="btn btn-success" style="width: 100%;" @onclick="FiltrarBens">Filtrar</button>

        <button type="button" class="btn btn-primary" style="width: 100%;" @onclick="Limpar">Limpar</button>
    </div>


    <nav class="navbar navbar-light" style="background-color: darkgreen"></nav>
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">NOME:</label>
        <input @bind="pessoa.Nome" type="text" class="form-control" id="exampleFormControlInput1" disabled="true">
    </div>

    <nav class="navbar navbar-light" style="background-color: darkorange"></nav>


    <h4 style="text-align:center">Bens Cadastrados</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Descrição</th>
                <th>Valor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in propriedadesFiltrada)
            {
                <tr>
                    <td>@item.Descricao</td>
                    <td>R$ @FormatValue(@item.Valor.Value)</td>
                </tr>
            }
        </tbody>
    </table>



    @if (propriedades.Count > 0)
    {
        <nav class="navbar navbar-light" style="background-color: darkorange"></nav>
        <h5>Total Bens Filtrados: R$ @FormatValue(@valorTotalBensFiltrados)</h5>
        <h4>Total: R$ @FormatValue(@valorTotal)</h4>
        <nav class="navbar navbar-light" style="background-color: darkorange"></nav>
    }


</div>

@code {
    private string cpfPesquisa;
    private Double filtroValor = 0;
    private string filtroDescricao = "";
    private Double valorTotal = 0;
    private Double valorTotalBensFiltrados
    {
        get
        {
            double total = 0;

            foreach (var item in propriedadesFiltrada)
            {
                if (item.Valor.HasValue)
                {
                    total += item.Valor.Value;
                }
            }

            return total;
        }
    }

    private bool ExibirFiltroValor { get; set; } = true;
    private bool ExibirFiltroDescricao { get; set; } = true;

    private Pessoa pessoa = new Pessoa();
    private List<Pessoa> listPessoas = new List<Pessoa>();
    private List<Propriedade> propriedades = new List<Propriedade>();
    private List<Propriedade> propriedadesFiltrada = new List<Propriedade>();

    protected override async Task OnInitializedAsync()
    {
        listPessoas = await pessoaService.GetPessoas();
    }

    private async Task SelecionarPessoas(ChangeEventArgs e)
    {
        cpfPesquisa = e.Value.ToString();

        pessoa = await pessoaService.GetPessoaByCpf(cpfPesquisa);

        if (pessoa != null)
        {
            propriedades = pessoa.Propriedades;
        }

        propriedadesFiltrada = propriedades;

        TotalBens();
    }

    private void LimpaCampoCheckbox()
    {
        if (ExibirFiltroValor && filtroValor > 0)
        {
            filtroValor = 0;
        }

        if (ExibirFiltroDescricao && !string.IsNullOrEmpty(filtroDescricao))
        {
            filtroDescricao = "";
        }

        FiltrarBens();
    }

    private void TotalBens()
    {
        valorTotal = 0;

        foreach (var item in propriedades)
        {
            if (item.Valor.HasValue)
            {
                valorTotal += item.Valor.Value;
            }
        }
    }

    private void FiltrarBens()
    {
        FiltroValor();
        FiltroDescricao();
    }

    private void FiltroValor()
    {
        if (filtroValor >= 0)
        {
            propriedadesFiltrada = propriedades.Where(x => x.Valor > filtroValor).ToList();
        }
    }

    private void FiltroDescricao()
    {
        if (!string.IsNullOrEmpty(filtroDescricao))
        {
            propriedadesFiltrada = propriedades.Where(x => x.Descricao.Contains(filtroDescricao)).ToList();
        }
    }

    private void Limpar()
    {
        pessoa = new Pessoa();
        propriedades = new List<Propriedade>();
        filtroValor = 0;
        cpfPesquisa = "";
    }

    private string FormatValue(double value)
    {
        return value.ToString("N2");
    }
}